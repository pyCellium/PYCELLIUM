import re
import textwrap
import time
check=re.compile(r'\d*/\d*') #Matches numbers then / then numbers. Used for getting valid begin/stays
while 1:
    bs=input(textwrap.fill("What are the begin/stay numbers in the format b/s (for example, Conway's Game of Life is begin 3, stay 2 and 3, so you would type 3/23). Leave blank before or after the slash for no-begin or no-stay rules. Type names of famous cellular automata to use those rules (COMING SOON)"))
    if check.match(bs):
        break #exit if valid string read
    print("Oops! The input seems incorrect. Try again")
exit=0 #Used for breaks. I'll get consistant breaks sometime....
begins=[] #List that gets populated with begin numbers
stays=[] #Ditto, with stay numbers
while exit==0:
    if bs[0]=="/":
        exit=1 #Stop if the slash is reached.
    else:
        begins.append(bs[0]) #Add the number
    bs=bs[1:] #Get rid of the number, or the slash
exit=0 #Reset exit
while exit==0:
    if bs=="":
        exit=1 #Stop if the end is reached.
    else: 
        stays.append(bs[0]) #Add the number
    bs=bs[1:] #Remove the number
exit=0 #Reset exit
map=[] #Populates with the map
while exit==0:
    newline=[] #Gets populated with new cells
    while 1:
        new=input("Input the next line. 1 for on, 0 for off. Please keep a uniform line size")
        if str.isdigit(new) or new=="":
            break #Exit if line is valid
        print("Oops! The input seems incorrect. Try again")
    if new=="":
        exit=1 #Stop if the user enters blank
    else:
        while new!="":
            newline.append(new[0]) #Populate list
            new=new[1:]
        map.append(newline) #Add to map
    for i in range(0, len(map)):
        if (map[i])[0]==1:
            for i in range (0,len(map)):
                map[i].insert(0,0) #If there's a 1 at the edge, pad the whole thing with zeroes on that edge
        if (map[i])[-1]==1:
            for i in range (0,len(map)):
                map[i].append(0) #Ditto
padding=[] #List of zeroes as wide as the map
for i in range(0, len(map[i])-2):
    padding.append("0")
if "1" in map[0]:
    map.insert(0, padding) #If there's a one on the edge, pad the whole thing
if "1" in map[-1]:
    map.append(padding) #Ditto
print(map)
paddedright=False
paddedleft=False
for l in range(0,len(map)):
    if not paddedleft:
        if (map[l])[0]=="1":
            for x in range(0,len(map)):
                print(x)
                print(map[x])
                map[x].insert(0, "0")
    if not paddedright:
        if (map[l])[-1]=="1":
            for x in range(0,len(map)):
                print(x)
                print(map[x])
                map[x].append("0")
while 1:
    mode=int(input("""Choose between default behaviour: Zeroes for dead cells or spaces.
Type 0 for zeroes and 1 for spaces"""))
    if mode=="0" or "1":
        mode=int(mode)
        break #Exit if it's valid.
    else:
        print("Oops! The input seems incorrect. Try again")
while 1:
    printmode=int(input("""Choose between default behaviour: print map between steps or
after all inputted steps. Type 0 for between and 1 for after"""))
    if printmode==0 or 1:
        break #Exit if it's valid.
    else:
        print("Oops! The input seems incorrect. Try again")
def printmap(map, mode):
    thing=""
    for i in range (0, len(map)):
        for j in range (0, len(map[i])):
            if (map[i])[j]=="1" or (map[i])[j]==1: #Should see why this is needed...
                thing+="1" #Basically, if there's 1 in that slot, print 1
            else:
                if mode%2==1:
                    thing+=" " #If you chose spaces, print a space if the cell's dead
                else:
                    thing+="0" #Ditto, for zeroes
        thing+="\n"
    print(thing)
    time.sleep(0.1)
printmap(map, mode) #Show the map
times="" #Times is how many steps to take
breaks=True
while(breaks):
    if str.isdigit(times):
        for i in range(0, int(times)):
            newmap=[] #YThe next steps map
            for i in range (0,len(map)):
                newline=[] #The next line
                for j in range(0,len(map[0])):
                    cellsum=0 #The number of cells alive and having an effect
                    if j<len(map[0])-1:
                        cellsum+=int((map[i])[j+1]) #To the right
                    if j>0:
                        cellsum+=int((map[i])[j-1]) #Left
                    if i<len(map)-1:
                        cellsum+=int((map[i+1])[j]) #Down
                    if i>0:
                        cellsum+=int((map[i-1])[j]) #Up
                    if i<len(map)-1 and j<len(map[0])-1:
                        cellsum+=int((map[i+1])[j+1]) #Down and right
                    if i<len(map)-1 and j>0:
                        cellsum+=int((map[i+1])[j-1]) #Down and left
                    if i>0 and j<len(map[0])-1:
                        cellsum+=int((map[i-1])[j+1]) #Up and right
                    if j>0 and i>0:
                        cellsum+=int((map[i-1])[j-1]) #Up and left
                    if (map[i])[j]=="0":
                        if str(cellsum) in begins:
                            newline.append("1") #Live if revived
                        else:
                            newline.append("0") #Stay dead otherwise
                    if (map[i])[j]=="1":
                        if str(cellsum) in stays:
                            newline.append("1") #Stay alive if fine
                        else:
                            newline.append("0") #Die otherwise
                newmap.append(newline) #Add the new line
            map=newmap #Update map
            newline=[]
            for i in range(0, len(map)):
                if (map[i])[0]=="1":
                    for i in range (0,len(map)):
                        map[i].insert(0,"0") #Pad if there's a live cell on that edge
                if (map[i])[-1]=="1":
                    for i in range (0,len(map)):
                        map[i].append("0") #Ditto
            padding=[] #Padding is as wide as the map, and is just zeroes
            for i in range(0, len(map[i])):
                padding.append("0")
            if "1" in map[0]:
                map.insert(0, padding) #Pad if there's a live cell on that edge
            if "1" in map[-1]:
                map.append(padding )#Ditto
            if printmode%2==1:
                printmap(map, mode)
        if printmode%2==0:
            printmap(map, mode)
    if times=="Toggle deads":
        mode+=1
    if times=="Toggle printmode":
        printmode+=1
    while 1:
        times=(input('What next? Enter a number for a number of times, enter "Toggle deads" to toggle dead cell display mode and "Toggle printmode" to toggle printmode'))
        if str.isdigit(times) or times=="Toggle deads" or times=="Toggle printmode":
            break #If it's a valid number, exit
        print("Oops! The input seems incorrect. Try again")
    if times=="":
        breaks=False
        

